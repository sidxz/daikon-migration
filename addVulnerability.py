import csv
from collections import Counter
from dbm.ndbm import library
import json
import os
import pprint
from operator import delitem
from apiClient import addVulnerability, getAppOrgs, getGenesWithAccessionKey
from apiClient import getTargets
from classes.Project import Project

# Define a list to hold the parsed vulnerability data
parsedVulnerability = []
# Define a list to hold the formatted vulnerability data with GeneID
formattedVulnerability = []
failedRvNumbers = []
apiResults = []

# Get the gene map from API
geneMap = getGenesWithAccessionKey()

# Define a function to get vulnerability data from csv file and format it
def getVulnerability():
    with open('inp_data/Genes/Vulnerability.csv', 'r') as input_csv:
        csv_reader = csv.reader(input_csv, delimiter=",")
        next(csv_reader)  # To skip header row
        line_count = 0
        
        # Loop through each row in the csv file
        for row in csv_reader:
            line_count += 1 # Increment line count
            rowDict = {
              "RvNumber": row[0],
              "rank": row[1],
              "viUpperBound": row[2],
              "viLowerBound": row[3],
              "vulnerabilityIndex": row[4],
              "vulnerabilityCondition": row[5],
              "tnseqEss": row[6],
              "crisprEss": row[7],
              "highConfidenceVulnerabilityCall": row[8],
              "reference": row[9],
            }
            parsedVulnerability.append(rowDict)
        print ('Processed', line_count, 'lines.')

# Define a function to map Rv number to GeneID
def addGeneID():
    for element in parsedVulnerability:
        if element["RvNumber"] in geneMap:
            element["GeneID"] = geneMap[element["RvNumber"]]["id"]
            formattedVulnerability.append(element)
        else:
          print ("Rv number not found in geneMap : ", element["RvNumber"])
          failedRvNumbers.append(element)
    return parsedVulnerability

# Define function to add vulnerability data to the database using API
def add():
    for element in formattedVulnerability:
        
        # Check if rank is not null or blank
        if element["rank"] and element["rank"].strip():
            rank = int(element["rank"])
        else:
            rank = None
            
        # Check if viUpperBound is not null or blank
        if element["viUpperBound"] and element["viUpperBound"].strip():
            viUpperBound = float(element["viUpperBound"])
        else:
            viUpperBound = None
            
        # Check if viLowerBound is not null or blank
        if element["viLowerBound"] and element["viLowerBound"].strip():
            viLowerBound = float(element["viLowerBound"])
        else:
            viLowerBound = None
            
        # Check if vulnerabilityIndex is not null or blank
        if element["vulnerabilityIndex"] and element["vulnerabilityIndex"].strip():
            vulnerabilityIndex = float(element["vulnerabilityIndex"])
        else:
            vulnerabilityIndex = None
        
        vulnerability = {
            "rank": rank,
            "viUpperBound": viUpperBound,
            "viLowerBound": viLowerBound,
            "vulnerabilityIndex": vulnerabilityIndex,
            "vulnerabilityCondition": element["vulnerabilityCondition"],
            "tnseqEss": element["tnseqEss"],
            "crisprEss": element["crisprEss"],
            "highConfidenceVulnerabilityCall": element["highConfidenceVulnerabilityCall"],
            "reference": element["reference"],
            "geneId": element["GeneID"],
            "url": "https://pebble.rockefeller.edu/genes/H37Rv/RVBD" + element["RvNumber"][2:]
        }
        
        # Add vulnerability data to the database
        statusCode = addVulnerability(element["GeneID"], vulnerability)
        vulnerability["statusCode"] = statusCode
        vulnerability["GeneID"] = element["GeneID"]
        vulnerability["RvNumber"] = element["RvNumber"]
        apiResults.append(vulnerability)
        print("Vulnerability data added for GeneID: ", element["GeneID"], " with status code: ", statusCode)
        



## Main

# Get vulnerability data  
getVulnerability()

# Map Rv number to GeneID
addGeneID()

# Write the formatted vulnerability data to a json file for logs
with open('int_data/formatted_vulnerability.json', 'w') as outfile:
    json.dump(formattedVulnerability, outfile, indent=4)
with open('int_data/formatted_vulnerability_failed_no_rv.json', 'w') as outfile:
    json.dump(failedRvNumbers, outfile, indent=4)
    
# Check if the vulnerability data is not empty
if len(formattedVulnerability) > 0:
    print("Starting to add vulnerability data to the database...")
    add()
    with open('int_data/vulnerability_api_results.json', 'w') as outfile:
        json.dump(apiResults, outfile, indent=4)
    print("Vulnerability data added to the database.")
else:
    print("No vulnerability data, Invalid Token?")
